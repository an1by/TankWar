const {getWithType} = require("./client")
const Logger = require("./logger.js");
const { getTanks, Tank, tank_list } = require("./tank");
const { getObstacles, obstacles_list } = require("./obstacles");

class GameController {
    constructor() {
        this.timer = -10;
        this.pause = false;
    }

    async start() {
        //////TO DELETE//////
        for (let i = 0; i < 6; i++) {
            let team = (i > 2 ? "red" : "blue")
            let number = i
            if (number > 2) 
                number -= 3
            const t = new Tank(number, team, undefined)
            t.position.x = i;
            t.position.y = (team == "red" ? 0 : 1)
            t.position.angle = (team == "red" ? 270 : 90)
        }
        //////TO DELETE//////
        send_field_setup("client")
        send_field_setup("manager")
        this.timer = 30
        await this.timer_start()
        Logger.success('Игра успешно запущена!')
    }

    end(winner=undefined) {
        tank_list.forEach(tank => tank.disconnect())
        obstacles_list.forEach(obstacle => obstacle.delete())
        ////////////////////
        this.timer = -10
        for (const client of getWithType("client")) {
            client.step = "none"
            let json = {
                "action": "step_feedback",
                "time": -10,
                "step": "none"
            }
            if (winner)
                json["winner"] = winner
            client.send_data(json)
        }
        Logger.success('Игра успещно завершена!')
    }
    pause(status) {
        this.pause = status
        if (this.pause)
            change_step("this.pause")
        else {
            this.timer = -1
            change_step("nonthis.pause")
        }
    }
    change_step(step) {
        for (const client of getWithType("client")) {
            switch (step) {
                case "this.pause":
                    client.send_data({
                        "action": "switch_this.pause",
                        "this.pause": true
                    })
                    break
                case "nonthis.pause":
                    client.send_data({
                        "action": "switch_this.pause",
                        "this.pause": false
                    })
                    break
                default:
                    if (step)
                        client.step = step
                        client.send_data({
                            "action": "step_feedback",
                            "time": this.timer,
                            "step": step
                        })
                    break
            }
        }
    }
    send_time(change_step=false) {
        if (change_step)
            this.timer = 30
        let counter = 0
        for (const client of getWithType("client")) {
            counter += 1
            if (change_step) {
                switch (client.step) {
                    case true:
                    case false:
                        client.step = !client.step
                }
            }
            client.send_data({
                "action": "step_feedback",
                "time": this.timer,
                "step": client.step
            })
        }
        if (counter !== 2) {
            this.timer = -10
            return
        }
    }
    async timer_start() {
        let id = setInterval(() => {
            if (this.timer <= -10) {
                this.end()
                clearInterval(id)
            } else if (this.pause) {
                this.send_time()
            } else if (this.timer > 0) {
                this.timer -= 1
                this.send_time()
            } else {
                this.send_time(true)
            }
        }, 1000)
    }
}

function send_field_setup(who) {
    for (const client of getWithType(who)) {
        if (who == "client")
            client.step = (client.team == "red")
        client.send_data({
            "action": "set_tanks",
            "tanks": getTanks()
        })
        client.send_data({
            "action": "set_obstacles",
            "obstacles": getObstacles()
        })
    }
}

module.exports = {
    send_field_setup, GameController
}